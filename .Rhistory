<<<<<<< HEAD
y = lat,
group = group,
fill = `% of Total Deaths that are COVID Deaths`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "green", high = "red") +
theme_void()
map_data("county") %>%
as_tibble() %>%
left_join(
COVID %>%
rename(region = state,
subregion = county,
`% of Total Deaths that are COVID Deaths` = pct_covid_deaths) %>%
mutate(
region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `% of Total Deaths that are COVID Deaths`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "green", high = "red") +
theme_void()
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(election)
View(election)
View(unemployment)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
map_data("county") %>%
as_tibble() %>%
left_join(
unemployment %>%
rename(region = state,
subregion = county,
`Unemployment Rate` = unemployment_rate) %>%
mutate(
region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `Unemployment Rate`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "green", high = "red") +
theme_void()
map_data("county") %>%
as_tibble() %>%
left_join(
education %>%
rename(region = state,
subregion = county) %>%
mutate(
region = str_to_lower(region),
subregion = str_to_lower(subregion),
log_unemployment_rate = log10(unemployment_rate)
) %>%
rename(`Log Unemployment Rate` = log_unemployment_rate),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `Log Unemployment Rate`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "red", high = "green") +
theme_void()
map_data("county") %>%
as_tibble() %>%
left_join(
unemployment %>%
rename(region = state,
subregion = county) %>%
mutate(
region = str_to_lower(region),
subregion = str_to_lower(subregion),
log_unemployment_rate = log10(unemployment_rate)
) %>%
rename(`Log Unemployment Rate` = log_unemployment_rate),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `Log Unemployment Rate`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "red", high = "green") +
theme_void()
skewness(master_data)
skewness(county_health$traffic_volume)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
skewness(master$population)
skewness(master_data$population)
skewness(master_data$covid_deaths)
skewness(master_data$total_deaths)
View(poverty_raw)
View(poverty_raw)
skewness((poverty_raw %>% pivot_wider(names_from = Attribute,
values_from = Value))$POVALL_2019)
nums <- unlist(lapply(master_data, is.numeric))
nums
master_data %>% dplyr::select(where(is.numeric))
skewness(master_data %>% dplyr::select(where(is.numeric)))
skew_check = skewness(master_data %>% dplyr::select(where(is.numeric)))
View(skew_check)
map_data("county") %>%
as_tibble() %>%
left_join(
COVID %>%
rename(
region = state,
subregion = county,
`% of Total Deaths that are COVID Deaths` = pct_covid_deaths
) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `% of Total Deaths that are COVID Deaths`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "green", high = "red") +
theme_void()
map_data("county") %>%
as_tibble() %>%
left_join(
unemployment %>%
rename(region = state,
subregion = county) %>%
mutate(
region = str_to_lower(region),
subregion = str_to_lower(subregion),
log_unemployment_rate = log10(unemployment_rate)
) %>%
rename(`Log Unemployment Rate` = log_unemployment_rate),
by = c("region", "subregion")
) %>%
ggplot() +
geom_polygon(
data = map_data("state"),
aes(x = long, y = lat, group = group),
color = "black",
fill = NA,
size = 1,
alpha = .3
) +
geom_polygon(
aes(
x = long,
y = lat,
group = group,
fill = `Log Unemployment Rate`
),
color = "darkblue",
size = .1
) +
scale_fill_gradient(low = "red", high = "green") +
theme_void()
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
# read in the cleaned data
master_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/master_data.csv")
library(tidyverse)
# read in the cleaned data
master_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/master_data.csv")
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/3-train-test-split.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/3-train-test-split.R', echo=TRUE)
View(master_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
library(kableExtra)                     # for printing tables
library(cowplot)                        # for side by side plots
library(lubridate)                      # for dealing with dates
library(maps)                           # for creating maps
library(tidyverse)
library(tidyquant)
library(scales)
# read in the cleaned data
master_data = read_csv(
"/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/master_data.csv"
)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
library(janitor)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/2-exploration.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
# read in the training data
train_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/train_data.csv")
View(train_data)
ridge_fit = cv.glmnet(leading_party ~ . - state - county - fips - total_votes - Democrat - Other - Republican - Green - Libertarian - pct_dem - pct_rep - pct_other - pct_green - pct_libertarian,
alpha = 0,
nfolds = 10,
family = "binomial",
type.measure = "class",
data = train_data)
plot(ridge_fit)
plot_glmnet(ridge_fit, default_train, features_to_plot = 4)
# load libraries
library(glmnetUtils)                    # to run ridge and lasso
source("code/functions/plot_glmnet.R")            # for lasso/ridge trace plots
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
plot_glmnet(ridge_fit, default_train, features_to_plot = 4)
source("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/code/functions/plot_glmnet.R")            # for lasso/ridge trace plots
plot_glmnet(ridge_fit, default_train, features_to_plot = 4)
plot_glmnet(ridge_fit, train_data, features_to_plot = 4)
plot_glmnet(ridge_fit, train_data, features_to_plot = 6)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
master_data = read_csv('data/clean/train_data.csv')
library(kableExtra)                     # for printing tables
library(cowplot)                        # for side by side plots
library(lubridate)                      # for dealing with dates
library(maps)                           # for creating maps
library(flextable)                      # creating contingency tables
library(corrplot)                       # creating correlation matrices
library(tidyverse)
library(tidyquant)
master_data = read_csv('data/clean/train_data.csv')
setwd('C:/Users/Mahima Sangli/OneDrive/Documents/2021-2022 School Year/STAT 471/election-final-project')
master_data = read_csv('data/clean/train_data.csv')
x_cts = dtypes[dtypes=='numeric'] %>%
names()
dtypes = sapply(colnames(master_data), function(x) class(master_data[[x]]))
x_cts = dtypes[dtypes=='numeric'] %>%
names()
x_cts
x_cts[1:12]
health_box = master_data %>%
ggplot(aes(x=poor_fair_health, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "Proportion with Poor Health",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/health-box.png",
plot = health_box,
device = "png",
width = 9,
height = 9
)
#covid
covid_box = master_data %>%
ggplot(aes(x=pct_covid_deaths, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "Percent of Deaths due to COVID",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/covid-box.png",
plot = covid_box,
device = "png",
width = 9,
height = 9
)
mask_hist = master_data %>%
select(sometimes, always, never, leading_party) %>%
group_by(leading_party) %>%
summarise(mean_sometimes = mean(sometimes),
mean_always = mean(always),
mean_never = mean(never))
mask1 = mask_hist %>%
ggplot() +
geom_bar(aes(x=mean_sometimes,y=leading_party,fill=leading_party),stat='identity') +
labs(x = 'Mean Proportion of Response "Sometimes"',
y = 'Leading Party') +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
mask2 = mask_hist %>%
ggplot() +
geom_bar(aes(x=mean_always,y=leading_party,fill=leading_party),stat='identity') +
labs(x = 'Mean Proportion of Response "Always"',
y = 'Leading Party') +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
mask3 = mask_hist %>%
ggplot() +
geom_bar(aes(x=mean_never,y=leading_party,fill=leading_party),stat='identity') +
labs(x = 'Mean Proportion of Response "Never"',
y = 'Leading Party') +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
plot_row = plot_grid(mask1,mask2,mask3)
title = ggdraw() +
draw_label(
"How often do you wear a mask?",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7))
mask_behavior = plot_grid(title, plot_row)
ggsave(
filename = "results/mask-bar.png",
plot = mask_behavior,
device = "png",
width = 20,
height = 9
)
#demographic/socioeconomic
#a) education
edu_box = master_data %>%
ggplot(aes(x=pct_bachelors_or_higher, y=leading_party, fill = leading_party)) +
geom_boxplot() +
labs(x = "% with Bach. Degree or Higher",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/edu-box.png",
plot = edu_box,
device = "png",
width = 9,
height = 9
)
#b) income/socieconomic status
income_box = master_data %>%
ggplot(aes(x=median_household_income, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "Median Household Income",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/income-box.png",
plot = income_box,
device = "png",
width = 9,
height = 9
)
unemp_box = master_data %>%
ggplot(aes(x=unemployment_rate, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "Unemployment Rate (%)",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/unemp-box.png",
plot = unemp_box,
device = "png",
width = 9,
height = 9
)
#c) race/ethnicity
race_box1 = master_data %>%
ggplot(aes(x=pct_nonhispanic_white, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "% Nonhispanic White Residents",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
race_box2 = master_data %>%
ggplot(aes(x=pct_nonhispanic_black, y=leading_party, fill=leading_party)) +
geom_boxplot()+
labs(x = "% Nonhispanic Black Residents",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
race_box3 = master_data %>%
ggplot(aes(x=pct_hispanic, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "% Hispanic Residents",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
race_box4 = master_data %>%
ggplot(aes(x=pct_asian, y=leading_party, fill=leading_party)) +
geom_boxplot() +
labs(x = "% Asian Residents",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
race_plots = plot_grid(race_box1,race_box2,race_box3,race_box4)
ggsave(
filename = "results/race-plots.png",
plot = race_plots,
device = "png",
width = 9,
height = 9
)
#d) age
age_box = master_data %>%
ggplot(aes(x=pct_above_65, y=leading_party, fill=leading_party)) +
geom_boxplot()+
labs(x = "% Residents Above 65",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/age-box.png",
plot = age_box,
device = "png",
width = 9,
height = 9
)
#e) gender
gender_box = master_data %>%
ggplot(aes(x=pct_females, y=leading_party, fill=leading_party)) +
geom_boxplot()+
labs(x = "% Female Residents",
y = "Leading Party") +
scale_fill_manual(breaks = c("Democrat", "Republican"),
values = c("blue", "red"))
ggsave(
filename = "results/gender-box.png",
plot = gender_box,
device = "png",
width = 9,
height = 9
)
=======
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,
v001_rawvalue = ,)
# clean county rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1) %>% na.omit()
# clean county rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
fips = county_health %>% select(fipscode)a
fips = county_health %>% select(fipscode)
county_health = cbind(fips,county_health[,grepl("rawvalue",names(county_health))])
county_health = county_health %>% na.omit()
# clean county rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
fips = county_health %>% select(fipscode)
county_health = cbind(fips,county_health[,grepl("rawvalue",names(county_health))])
county_health = county_health %>% scale()
# clean county rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
fips = county_health %>% select(fipscode)
county_health = cbind(fips,scale(county_health[,grepl("rawvalue",names(county_health))]))
# clean county rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
fips = county_health %>% select(fipscode)
county_health = cbind(fips,county_health[,grepl("rawvalue",names(county_health))])
str(county_health)
county_health[ , apply(Itun, 2, function(x) !any(is.na(x)))]
county_health = county_health[ , apply(county_health, 2, function(x) !any(is.na(x)))]
View(county_health)
county_health = county_health[,order(colnames(county_health))]
View(county_health)
rm(count_health_cleaner)
View(population_raw)
county_health = county_health %>%
select(-v051_rawvalue, -v069_rawvalue)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
county_health = county_health %>%
select(-v051_rawvalue, -v069_rawvalue) %>%
rename(poor_fair_health = v002_rawvalue)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
str(county_health)
str(election)
county_health[, 1:26] = sapply(county_health[, 1:26], as.numeric)
str(county_health)
county_health = scale(county_health)
county_health[, 2:26] = scale(county_health[, 2:26])
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(COVID_raw)
View(county_health)
View(population_raw)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(CH_fips)
View(county_health)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
# clean county health rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
View(county_health)
county_health = county_health[-1,]
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
# clean COVID data
COVID = COVID_raw %>% inner_join(fips_raw)
View(fips_raw)
# clean COVID data
fips = fips_raw %>% mutate_all(~gsub(" County", "", .))
View(fips)
COVID_raw
# download COVID and mask-use data (source: CDC)
COVID_raw = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/raw/covid.csv")
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(county_health)
county_health = county_health %>%
select(-v051_rawvalue,-v069_rawvalue) %>%
rename(
poor_fair_health = v002_rawvalue,
adult_smoking = v009_rawvalue,
adult_obesity = v011_rawvalue,
poor_physical_health_days = v036_rawvalue,
poor_mental_health_days = v042_rawvalue,
excessive_drinking = v049_rawvalue,
pct_below_18 = v052_rawvalue,
pct_above_65 = v053_rawvalue,
pct_nonhispanic_black = v054_rawvalue,
pct_native_american = v055_rawvalue,
pct_hispanic = v056_rawvalue,
pct_females = v057_rawvalue,
pct_nonproficient_english = v059_rawvalue,
diabetes_prevalence = v060_rawvalue,
physical_inactivity = v070_rawvalue,
pct_pacific_islander = v080_rawvalue,
pct_asian = v081_rawvalue,
pct_nonhispanic_white = v126_rawvalue,
severe_housing_issues = v136_rawvalue,
food_insecurity = v139_rawvalue,
social_associations = v140_rawvalue,
insufficient_sleep = v143_rawvalue,
frequent_physical_distress = v144_rawvalue,
frequent_mental_distress = v145_rawvalue,
homeownership = v153_rawvalue,
traffic_volume = v156_rawvalue
)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(county_health)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
# clean COVID data
str(COVID_raw)
COVID = COVID_raw %>% select(`FIPS Code`, `Total deaths`, `COVID-19 Deaths`, `Urban Rural Description`)
View(COVID)
COVID = unique(COVID)
View(COVID)
COVID = COVID_raw %>% select(`FIPS Code`, `Total deaths`, `COVID-19 Deaths`, `Urban Rural Description`)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(education_raw)
View(masks_raw)
masks = masks_raw %>% rename(fips = COUNTYFP, never = NEVER, rarely = RARELY,
sometimes = SOMETIMES, frequently = FREQUENTLY,
always = ALWAYS)
View(masks)
str(masks)
# clean mask data
masks = masks_raw %>% rename(fips = COUNTYFP, never = NEVER, rarely = RARELY,
sometimes = SOMETIMES, frequently = FREQUENTLY,
always = ALWAYS) %>%
as.numeric()
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
str(elections)
str(election)
View(population_raw)
# clean population data
population = population_raw %>% mutate_all(~gsub("Population ", "", .))
View(population)
population = population_raw %>% mutate_all(~gsub("Population ", "", .)) %>%
select(fips = FIPStxt, year = Attribute, population = Value) %>%
filter(year == 2020)
View(population)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
population_raw[-1,]
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
View(election_raw)
election = election_raw %>%
na.omit() %>%
filter(year == 2020) %>%
filter(mode == "TOTAL") %>%
select(-candidate,-office,-mode,-version, -year, -state_po) %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
rename(democrat = DEMOCRAT, libertarian = LIBERTARIAN, republican = REPUBLICAN,
green = GREEN, other = OTHER, total_votes = totalvotes) %>%
mutate(
pct_dem = democrat / total_votes,
pct_rep = republican / total_votes,
pct_other = other / total_votes,
pct_green = green / total_votes,
pct_libertarian = libertarian / total_votes
) %>%
rename(fips = county_fips)
partytallies = election %>%
select(democrat, other, republican, green, libertarian)
election = cbind(election, leading_party = colnames(partytallies)[apply(partytallies, 1, which.max)])
# clean county health rankings data
county_health = county_health_raw %>% row_to_names(row_number = 1)
county_health = county_health[-1,]
CH_fips = county_health %>% select(fipscode)
county_health = cbind(CH_fips, county_health[, grepl("rawvalue", names(county_health))])
county_health = county_health[, apply(county_health, 2, function(x)
! any(is.na(x)))]
county_health = county_health[, order(colnames(county_health))]
county_health = county_health %>%
select(-v051_rawvalue,-v069_rawvalue) %>%
rename(
fips = fipscode,
poor_fair_health = v002_rawvalue,
adult_smoking = v009_rawvalue,
adult_obesity = v011_rawvalue,
poor_physical_health_days = v036_rawvalue,
poor_mental_health_days = v042_rawvalue,
excessive_drinking = v049_rawvalue,
pct_below_18 = v052_rawvalue,
pct_above_65 = v053_rawvalue,
pct_nonhispanic_black = v054_rawvalue,
pct_native_american = v055_rawvalue,
pct_hispanic = v056_rawvalue,
pct_females = v057_rawvalue,
pct_nonproficient_english = v059_rawvalue,
diabetes_prevalence = v060_rawvalue,
physical_inactivity = v070_rawvalue,
pct_pacific_islander = v080_rawvalue,
pct_asian = v081_rawvalue,
pct_nonhispanic_white = v126_rawvalue,
severe_housing_issues = v136_rawvalue,
food_insecurity = v139_rawvalue,
social_associations = v140_rawvalue,
insufficient_sleep = v143_rawvalue,
frequent_physical_distress = v144_rawvalue,
frequent_mental_distress = v145_rawvalue,
homeownership = v153_rawvalue,
traffic_volume = v156_rawvalue
)
str(county_health)
View(county_health)
county_health = subset(county_health, !(endsWith(ColA, '000')))
county_health = subset(county_health, !(endsWith(fips, '000')))
county_health = county_health_raw %>% row_to_names(row_number = 1)
county_health = county_health[-1,]
CH_fips = county_health %>% select(fipscode)
county_health = cbind(CH_fips, county_health[, grepl("rawvalue", names(county_health))])
county_health = county_health[, apply(county_health, 2, function(x)
! any(is.na(x)))]
county_health = county_health[, order(colnames(county_health))]
county_health = county_health %>%
select(-v051_rawvalue,-v069_rawvalue) %>%
rename(
fips = fipscode,
poor_fair_health = v002_rawvalue,
adult_smoking = v009_rawvalue,
adult_obesity = v011_rawvalue,
poor_physical_health_days = v036_rawvalue,
poor_mental_health_days = v042_rawvalue,
excessive_drinking = v049_rawvalue,
pct_below_18 = v052_rawvalue,
pct_above_65 = v053_rawvalue,
pct_nonhispanic_black = v054_rawvalue,
pct_native_american = v055_rawvalue,
pct_hispanic = v056_rawvalue,
pct_females = v057_rawvalue,
pct_nonproficient_english = v059_rawvalue,
diabetes_prevalence = v060_rawvalue,
physical_inactivity = v070_rawvalue,
pct_pacific_islander = v080_rawvalue,
pct_asian = v081_rawvalue,
pct_nonhispanic_white = v126_rawvalue,
severe_housing_issues = v136_rawvalue,
food_insecurity = v139_rawvalue,
social_associations = v140_rawvalue,
insufficient_sleep = v143_rawvalue,
frequent_physical_distress = v144_rawvalue,
frequent_mental_distress = v145_rawvalue,
homeownership = v153_rawvalue,
traffic_volume = v156_rawvalue
)
county_health = subset(county_health, !(endsWith(fips, '000')))
county_health[, 1:27] = sapply(county_health[, 1:27], as.numeric)
county_health[, 2:27] = scale(county_health[, 2:27])
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(masks)
View(population)
View(education_raw)
# clean education data
education = education_raw[,40:47]
View(education)
education = cbind(education_raw[,1], education_raw[,40:47])
str(education)
# clean education data
education = cbind(education_raw[,1], education_raw[,44:47])
education = cbind(education_raw[,1], education_raw[,44:47])
education = education %>%
rename(fips = `FIPS Code`,
pct_less_than_high_school = `Percent of adults with less than a high school diploma, 2015-19`,
pct_high_school_dip = `Percent of adults with a high school diploma only, 2015-19`,
pct_college_associates = `Percent of adults completing some college or associate's degree, 2015-19`,
pct_bachelors_or_higher = `Percent of adults with a bachelor's degree or higher, 2015-19`)
education = subset(education, !(endsWith(fips, '000')))
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
education = sapply(education, as.numeric)
education[, -1] = scale(education[, -1])
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(unemployment_raw)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
# clean unemployment data
unemployment = unemployment_raw %>%
filter(Attribute == "Unemployment_rate_2020" || Attribute == "Median_Household_Income_2019")
View(unemployment)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
# clean unemployment data
unemployment = unemployment_raw %>%
filter(equals(Attribute,"Median_Household_Income_2019"))
str(unemployment_raw)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(population_raw)
str_detect
str_detect
?str_detect
# clean unemployment data
unemployment = unemployment_raw %>%
filter(str_detect(Attribute,c("Median_Household_Income_2019","Unemployment_rate_2020")))
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
unemployment = unemployment[-c(1,2),]
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
str(unemployment_raw)
unemployment = subset(unemployment, !(fips%%1000==0))
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(poverty_raw)
# clean poverty data
poverty = poverty_raw %>% pivot_wider(names_from = Attribute,
values_from = Value)
poverty = poverty_raw %>% pivot_wider(names_from = Attribute,
values_from = Value)
View(poverty)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
str(poverty)
%
poverty = subset(poverty, !(fips%%1000==0))
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
# inner join based on fips
master_data = inner_join(election,county_health,by=fips)
# inner join based on fips
master_data = inner_join(x=election,y=county_health,by=fips)
# inner join based on fips
election = as.data.frame(election)
county_health = as.data.frame(county_health)
master_data = inner_join(x=election,y=county_health,by=fips)
master_data = inner_join(x=election,y=county_health,by="fips")
View(master_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
View(poverty)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/0-download.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
train_data = train_data %>% mutate(leading_party = as.numeric(leading_party == "Democrat"))
View(train_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
lasso_fit = cv.glmnet(leading_party ~ . - state - county - fips - total_votes - Democrat - Other - Republican - Green - Libertarian - pct_dem - pct_rep - pct_other - pct_green - pct_libertarian,
family = "binomial",
type.measure = "class",
data = train_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
lot_glmnet(lasso_fit, train_data, features_to_plot = 6)
plot_glmnet(lasso_fit, train_data, features_to_plot = 6)
library(glmnetUtils)                    # to run ridge and lasso
source("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/code/functions/plot_glmnet.R")            # for lasso/ridge trace plots
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient)))
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
coef(glm_fit) %>%
arrange(desc(abs(coefficient))) %>%
write_tsv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/glm-features-table.tsv")
coef(glm_fit)
glm_coefs = coef(glm_fit)
glm_coefs = as.data.frame(coef(glm_fit))
View(glm_coefs)
glm_coefs = as.data.frame(coef(glm_fit)) %>% rownames_to_column("VALUE")
View(glm_coefs)
glm_coefs = as.data.frame(coef(glm_fit)) %>% rownames_to_column("Feature")
beta_hat_std
glm_coefs = as.data.frame(coef(glm_fit)) %>% rownames_to_column("feature") %>% rename(coefficient = coef(glmfit))
glm_coefs = as.data.frame(coef(glm_fit)) %>% rownames_to_column("feature") %>% rename(coefficient = `coef(glmfit)`)
glm_coefs = as.data.frame(coef(glm_fit)) %>% rownames_to_column("feature") %>% rename(coefficient = `coef(glm_fit)`)
glm_coefs = glm_coefs[-1,]
View(beta_hat_std)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
# load test data and mutate to be binary
test_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/test_data.csv")
test_data = test_data %>% mutate(leading_party = as.numeric(leading_party == "Democrat"))
View(test_data)
# load libraries
library(glmnetUtils)
library(tidyverse)
# load test data
test_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/test_data.csv")
test_data = test_data %>% mutate(leading_party = as.numeric(leading_party == "Democrat"))
# load glm fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/glm_fit.Rda")
# load ridge fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/ridge_fit.Rda")
# load lasso fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/lasso_fit.Rda")
# evaluate glm RMSE
glm_predictions = predict(glm_fit,
newdata = test_data,
s = "lambda.1se")
# evaluate glm RMSE
glm_predictions = predict(glm_fit, newdata = test_data, type = "response")
# load test data
test_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/test_data.csv")
test_data = test_data %>% mutate(leading_party = as.numeric(leading_party == "Democrat"))
# load glm fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/glm_fit.Rda")
# load ridge fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/ridge_fit.Rda")
# load lasso fit object
load("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/results/lasso_fit.Rda")
# evaluate glm RMSE
glm_predictions = predict(glm_fit, newdata = test_data, type = "response")
# read in the training data and convert response to binary (Dem = 1, Rep = 0)
train_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/train_data.csv")
train_data = train_data %>%
mutate(leading_party = as.numeric(leading_party == "Democrat")) %>%
select(-state, -county, -fips, -total_votes, -Democrat, -Other, -Republican, -Green, -Libertarian, -pct_dem, -pct_rep, -pct_other, -pct_green, -pct_libertarian)
View(train_data)
str(train_data)
View(train_data)
str(train_data)
# read in the training data and convert response to binary (Dem = 1, Rep = 0)
train_data = read_csv("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project/data/clean/train_data.csv")
str(train_data)
train_data = train_data %>%
mutate(leading_party = as.numeric(leading_party == "Democrat")) %>%
select(-state, -county, -fips, -total_votes, -Democrat, -Other, -Republican, -Green, -Libertarian, -pct_dem, -pct_rep, -pct_other, -pct_green, -pct_libertarian)
str(train_data)
View(train_data)
View(master_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
?skewness
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
colnames(master_data)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/1-cleaning.R', echo=TRUE)
rm(list=ls())
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/5-tree-modeling.R', echo=TRUE)
setwd()
getwd()
setwd("/Users/sahill/OneDrive - PennO365/STAT 471/election-final-project")
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/5-tree-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/4-regression-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
misclass_errs
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/5-tree-modeling.R', echo=TRUE)
source('~/OneDrive - PennO365/STAT 471/election-final-project/code/6a-model-evaluation.R', echo=TRUE)
misclass_errs
>>>>>>> 505b6f9b2f2b588be790aadfaf866da5ad055a9f
